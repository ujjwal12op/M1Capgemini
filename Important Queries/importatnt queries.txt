1. Maximum/Minimum customers in branch

WITH BranchAccountCounts AS (
    SELECT
        branch_id,
        COUNT(account_number) AS customer_count
    FROM
        account_master
    GROUP BY
        branch_id
)
SELECT
    bm.branch_name,
    bm.branch_city
FROM
    branch_master bm
JOIN
    BranchAccountCounts bac ON bm.branch_id = bac.branch_id
WHERE
    bac.customer_count = (
        SELECT MAX(customer_count)
        FROM BranchAccountCountsim
    )
ORDER BY
    bm.branch_name ASC;

2. 

SELECT DISTINCT
    cm.CUSTOMER_ID,
    cm.CUSTOMER_NAME,
    ccd.CARD_ID AS card_id,
    lcm.DESCRIPTION,
    ROUND(lcm.AMOUNT / 52, 0) AS AMOUNT_DOLLAR
FROM
    CUSTOMER_MASTER cm
JOIN CUSTOMER_CARD_DETAILS ccd
    ON cm.CUSTOMER_ID = ccd.CUSTOMER_ID
JOIN LIBRARY_CARD_MASTER lcm
    ON ccd.CARD_ID = lcm.CARD_ID
WHERE NOT EXISTS (
    SELECT 1
    FROM CUSTOMER_ISSUE_DETAILS cid
    WHERE cid.CUSTOMER_ID = cm.CUSTOMER_ID
      AND cid.ISSUE_DATE = ccd.REGISTRATION_DATE
)
ORDER BY
    cm.CUSTOMER_NAME ASC;



3. Whenever asked employeed issued atleast 1 item , ya atleast 1 thing 

So always think of where something is not null

4. Whenever asked where something not issued to any.
LEFT JOIN 
only null values column

5. WHENEVER comparing question come with minimum , maximum , average etc. Employeee with minimum number of tickets

SELECT profile_id
FROM air_ticket_info
GROUP BY profile_id
HAVING count(ticket_id) = (SELECT count(ticket_id)
                           FROM air_ticket_info
                           GROUP BY profile_id
                           ORDER BY count(ticket_id)
                           LIMIT 1)
ORDER BY profile_id ASC;

DATE_FORMAT(ati.flight_departure_date, '%h:%i:%s %p') as 'actual_departure_time',
  DATE_FORMAT(DATE_ADD(af.departure_time, INTERVAL 1 HOUR), '%h:%i:%s %p') as 'delayed_departure_time',
  DATE_FORMAT(DATE_ADD(af.arrival_time, INTERVAL 1 HOUR), '%h:%i:%s %p') as 'delayed_arrival_time'
FROM

6. USE OF CASES 

CASE
        WHEN departure_time BETWEEN '05:00:01' AND '12:00:00' THEN 'Morning' ELSE
        WHEN departure_time BETWEEN '12:00:01' AND '18:00:00' THEN 'Afternoon'
        WHEN departure_time BETWEEN '18:00:01' AND '23:59:59' THEN 'Evening'
        WHEN departure_time BETWEEN '00:00:01' AND '05:00:00' THEN 'Night'
        ELSE 'Unknown'
END AS Time_of_Service


Q. Passengers who booked minimum number of tickets 

WITH PassengerTable AS (
SELECT profile_id,COUNT(*) As count
FROM air_ticket_infor
GROUP BY profile_id
) 
SELECT profile_id 
FROM PassengerTable
WHERE COUNT(ticketid) = (SELECT MIN(count) FROM PassengerTable)
ORDER BY profile_id ASC;


Q.
am.opening_balance+SUM(CASE WHEN transaction_type='Deposit' THEN transaction_amount ELSE 0 END) AS Deposit
SUM(CASE WHEN transaction_type='Withdrawal' THEN transaction_amount ELSE 0 END) AS Withdrawal


Q. Customer with MIN/MAX count.

WITH CustomerMovieCounts AS (
    SELECT
        c.customer_id,
        c.customer_name,
        COUNT(i.movie_id) AS movie_count
    FROM
        customer_master c
    JOIN
        issue_table i ON c.customer_id = i.customer_id
    GROUP BY
        c.customer_id,
        c.customer_name
    HAVING
        COUNT(i.movie_id) >= 1  -- Only consider customers with at least 1 movie
),
MinMaxCounts AS (
    SELECT
        MIN(movie_count) AS min_count,
        MAX(movie_count) AS max_count
    FROM
        CustomerMovieCounts
)
SELECT
    cmc.customer_id,
    cmc.customer_name
FROM
    CustomerMovieCounts cmc
CROSS JOIN
    MinMaxCounts mmc
WHERE
    cmc.movie_count = mmc.max_count
    OR cmc.movie_count = mmc.min_count
ORDER BY
    CASE
        WHEN cmc.movie_count = mmc.max_count THEN 1
        WHEN cmc.movie_count = mmc.min_count THEN 2
    END,
    cmc.customer_id ASC;


Q. Tickets full more than 10%.

SELECT
    af.flight_id,
    af.from_location,
    af.to_location,
    af.total_seats,
    COUNT(ati.ticket_id) AS "No of Seats Booked"
FROM
    air_flight af
JOIN
    air_ticket_info ati ON af.flight_id = ati.flight_id
GROUP BY
    af.flight_id,
    af.from_location,
    af.to_location,
    af.total_seats
HAVING
    (COUNT(ati.ticket_id) * 100.0 / af.total_seats) > 10;